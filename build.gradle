plugins {

    // extends the "java" plugin so we don't have to include "java" explicitly
    id("groovy")

    id("com.diffplug.eclipse.apt") version "3.22.0"
    id("com.github.johnrengelman.shadow") version "6.0.0"
    id("application")
}

version "1.0"
group "example"

// additional properties
ext {
    micronautVersion = "2.0.0"
}

mainClassName = "example.Application"

repositories {
    mavenCentral()
    jcenter()
}

dependencies {

    annotationProcessor(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    annotationProcessor("io.micronaut:micronaut-inject-java")
    annotationProcessor("io.micronaut:micronaut-validation")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")

    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.data:micronaut-data-model")

    implementation("org.apache.commons:commons-lang3:3.10")

    runtimeOnly("ch.qos.logback:logback-classic")

    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("io.micronaut:micronaut-inject-groovy")

    // required for mocking non-interface types
    testImplementation("net.bytebuddy:byte-buddy:1.10.13")

    testImplementation("org.spockframework:spock-core") {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }

    testImplementation("io.micronaut.test:micronaut-test-spock")
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
    targetCompatibility = JavaVersion.toVersion('11')
}

test.classpath += configurations.developmentOnly

/* use JUnit [5] platform - test are actually run by Spock but
 * gradle doesn't "know" anything about Spock, so a standard
 * execution platform has to be used
 */
test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=example.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
    if (gradle.startParameter.continuous) {
        systemProperties(
                'micronaut.io.watch.restart': 'true',
                'micronaut.io.watch.enabled': 'true',
                "micronaut.io.watch.paths": "src/main"
        )
    }
}





